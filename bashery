Use “set -o errexit” to cause the script to exit if any line fails
Use “set -o nounset” to cause an error if you use an empty environment variable
If you don’t expect a variable to change, declare it readonly
Expect variables could have spaces and quote accordingly
Use traps to clean up your mess
---
some_command
if [[ $? != 0 ]]
then
   recover
fi

some_command || recover
---
readonly TIMEOUT_S=10
---
rm $2  When $2 is something like “readme.txt” that’s fine. However, if $2 is “The quick red fox” you wind up trying to erase four files named “The,” “quick,” “red,” and “fox.”
rm "$2"
---
to delete temp file on failure:
trap "rm -f /tmp/output; exit" INT TERM EXIT
trap - INT TERM EXIT
---
shellcheck
